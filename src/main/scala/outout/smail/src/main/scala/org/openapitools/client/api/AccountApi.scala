/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Account
import org.openapitools.client.model.AccountDetail
import org.openapitools.client.model.DomainAlias
import org.openapitools.client.model.Error
import java.io.File
import org.openapitools.client.model.FlakeId
import org.openapitools.client.model.InlineObject
import org.openapitools.client.model.InlineObject5
import org.openapitools.client.model.InlineResponse2001
import org.openapitools.client.model.InlineResponse2002
import org.openapitools.client.model.Success
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object AccountApi {

  def apply(baseUrl: String = "http://localhost") = new AccountApi(baseUrl)
}

class AccountApi(baseUrl: String) {
  
  /**
   * Expected answers:
   *   code 200 : FlakeId (Success)
   *   code 400 : Error (error: 8, 9, 1001, 1006, 1010)
   * 
   * @param accountId Id of a account
   */
  def accountAccountIdDelete(accountId: String): ApiRequest[FlakeId] =
    ApiRequest[FlakeId](ApiMethods.DELETE, baseUrl, "/account/{account_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withSuccessResponse[FlakeId](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return the specified account.
   * 
   * Expected answers:
   *   code 200 : AccountDetail (Success)
   *   code 400 : Error (error: 8, 9, 1001)
   * 
   * @param accountId Id of a account
   */
  def accountAccountIdGet(accountId: String): ApiRequest[AccountDetail] =
    ApiRequest[AccountDetail](ApiMethods.GET, baseUrl, "/account/{account_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withSuccessResponse[AccountDetail](200)
      .withErrorResponse[Error](400)
      

  /**
   * Expected answers:
   *   code 200 : InlineResponse2002 (Success)
   * 
   * @param accountId Id of a account
   */
  def accountAccountIdGroupExpansionGet(accountId: String): ApiRequest[InlineResponse2002] =
    ApiRequest[InlineResponse2002](ApiMethods.GET, baseUrl, "/account/{account_id}/group-expansion", "application/json")
      .withPathParam("account_id", accountId)
      .withSuccessResponse[InlineResponse2002](200)
      

  /**
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param inlineObject update action and parameters
   * @param accountId Id of a account
   */
  def accountAccountIdGroupExpansionPost(inlineObject: Seq[InlineObject], accountId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/account/{account_id}/group-expansion", "application/json")
      .withBody(inlineObject)
      .withPathParam("account_id", accountId)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update an account by providing complete or partial account information 
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 1000, 1001, 1006, 1008, 1026)
   * 
   * @param account account update information
   * @param accountId Id of a account
   */
  def accountAccountIdPost(account: Account, accountId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/account/{account_id}", "application/json")
      .withBody(account)
      .withPathParam("account_id", accountId)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return the roles of the specified account.
   * 
   * Expected answers:
   *   code 200 : Seq[String] (Success)
   * 
   * @param accountId Id of a account
   */
  def accountAccountIdRoleGet(accountId: String): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, baseUrl, "/account/{account_id}/role", "application/json")
      .withPathParam("account_id", accountId)
      .withSuccessResponse[Seq[String]](200)
      

  /**
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param from domain alias from
   */
  def accountDomainAliasesFromDelete(from: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.DELETE, baseUrl, "/account/domain-aliases/{from}", "application/json")
      .withPathParam("from", from)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 1011)
   * 
   * @param inlineObject5 
   * @param from domain alias from
   */
  def accountDomainAliasesFromPost(inlineObject5: InlineObject5, from: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/account/domain-aliases/{from}", "application/json")
      .withBody(inlineObject5)
      .withPathParam("from", from)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Expected answers:
   *   code 200 : Seq[DomainAlias] (Success)
   */
  def accountDomainAliasesGet(): ApiRequest[Seq[DomainAlias]] =
    ApiRequest[Seq[DomainAlias]](ApiMethods.GET, baseUrl, "/account/domain-aliases", "application/json")
      .withSuccessResponse[Seq[DomainAlias]](200)
      

  /**
   * Return the account profile having speicified *email*.
   * 
   * Expected answers:
   *   code 200 : AccountDetail (Success)
   *   code 400 : Error (error: 8, 9, 1001)
   * 
   * @param email any email of a account
   */
  def accountEmailEmailGet(email: String): ApiRequest[AccountDetail] =
    ApiRequest[AccountDetail](ApiMethods.GET, baseUrl, "/account/email/{email}", "application/json")
      .withPathParam("email", email)
      .withSuccessResponse[AccountDetail](200)
      .withErrorResponse[Error](400)
      

  /**
   * Export account group information to CSV format
   * 
   * Expected answers:
   *   code 200 : File (CSV file)
   * 
   * @param requestBody list of account id
   */
  def accountExportCsvPost(requestBody: Seq[String]): ApiRequest[File] =
    ApiRequest[File](ApiMethods.POST, baseUrl, "/account/export/csv", "application/json")
      .withBody(requestBody)
      .withSuccessResponse[File](200)
      

  /**
   * Import account group information from CSV format
   * 
   * Expected answers:
   *   code 400 :  (Unimplemented)
   * 
   * @param file account group information in CSV format, only accept content type `text/csv`
   * @param root root group which all import data will append on
   */
  def accountImportCsvRootPost(file: File, root: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/account/import/csv/{root}", "multipart/form-data")
      .withFormParam("file", file)
      .withPathParam("root", root)
      .withErrorResponse[Unit](400)
      

  /**
   * List account IDs within specified domain.
   * 
   * Expected answers:
   *   code 200 : Seq[String] (Success)
   * 
   * @param domainId Id of domain
   */
  def accountListDomainIdGet(domainId: String): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, baseUrl, "/account/list/{domain_id}", "application/json")
      .withPathParam("domain_id", domainId)
      .withSuccessResponse[Seq[String]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[String] (Success)
   */
  def accountListGet(): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, baseUrl, "/account/list", "application/json")
      .withSuccessResponse[Seq[String]](200)
      

  /**
   * Return whether specified *name* has been used
   * 
   * Expected answers:
   *   code 200 : InlineResponse2001 (Success)
   *   code 400 : Error (error: 8, 9, 1001)
   * 
   * @param username Username to be checked
   */
  def accountNameExistsGet(username: String): ApiRequest[InlineResponse2001] =
    ApiRequest[InlineResponse2001](ApiMethods.GET, baseUrl, "/account/name/exists", "application/json")
      .withQueryParam("username", username)
      .withSuccessResponse[InlineResponse2001](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return the account profile having speicified *name*.
   * 
   * Expected answers:
   *   code 200 : AccountDetail (Success)
   *   code 400 : Error (error: 8, 9, 1001)
   * 
   * @param name name of a account
   */
  def accountNameNameGet(name: String): ApiRequest[AccountDetail] =
    ApiRequest[AccountDetail](ApiMethods.GET, baseUrl, "/account/name/{name}", "application/json")
      .withPathParam("name", name)
      .withSuccessResponse[AccountDetail](200)
      .withErrorResponse[Error](400)
      

  /**
   * Expected answers:
   *   code 200 : FlakeId (Success)
   *   code 400 : Error (error: 8, 9, 10, 1006, 1007, 1009, 1025, 1026, 1027)
   * 
   * @param account account to be added
   */
  def accountPut(account: Account): ApiRequest[FlakeId] =
    ApiRequest[FlakeId](ApiMethods.PUT, baseUrl, "/account", "application/json")
      .withBody(account)
      .withSuccessResponse[FlakeId](200)
      .withErrorResponse[Error](400)
      



}

