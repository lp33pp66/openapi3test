/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Error
import org.openapitools.client.model.ServerCertificateInfo
import org.openapitools.client.model.ServerPemCertificateImport
import org.openapitools.client.model.Success
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CryptographApi {

  def apply(baseUrl: String = "http://localhost") = new CryptographApi(baseUrl)
}

class CryptographApi(baseUrl: String) {
  
  /**
   * Get server certificate infomation
   * 
   * Expected answers:
   *   code 200 : ServerCertificateInfo (Returns empty object if no certificate defined)
   */
  def cryptographyServerCertificateGet(): ApiRequest[ServerCertificateInfo] =
    ApiRequest[ServerCertificateInfo](ApiMethods.GET, baseUrl, "/cryptography/server-certificate", "application/json")
      .withSuccessResponse[ServerCertificateInfo](200)
      

  /**
   * Import private key and certificate in PEM format for servers
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 22006, 22007, 22008, 22009, 22010, 22011, 22012, 22013, 22014, 22015, 22016)
   * 
   * @param serverPemCertificateImport 
   */
  def cryptographyServerCertificatePost(serverPemCertificateImport: ServerPemCertificateImport): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/cryptography/server-certificate", "application/json")
      .withBody(serverPemCertificateImport)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      



}

