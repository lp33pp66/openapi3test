/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AntivirusInfo
import org.openapitools.client.model.Dns
import org.openapitools.client.model.DomainAuthSource
import org.openapitools.client.model.Error
import org.openapitools.client.model.Hostname
import org.openapitools.client.model.Hosts
import org.openapitools.client.model.ImapPop3Config
import org.openapitools.client.model.IndexErrors
import org.openapitools.client.model.IsRunning
import org.openapitools.client.model.MailParserConfig
import org.openapitools.client.model.NetworkInfo
import org.openapitools.client.model.QueueSize
import org.openapitools.client.model.ScheduleId
import org.openapitools.client.model.ScheduleImportConfig
import org.openapitools.client.model.Success
import org.openapitools.client.model.SystemInfo
import org.openapitools.client.model.Time
import org.openapitools.client.model.UserDefinedSchedule
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object SystemApi {

  def apply(baseUrl: String = "http://localhost") = new SystemApi(baseUrl)
}

class SystemApi(baseUrl: String) {
  
  /**
   * get specified antivirus info
   * 
   * Expected answers:
   *   code 200 : AntivirusInfo (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameGet(antivirusName: String): ApiRequest[AntivirusInfo] =
    ApiRequest[AntivirusInfo](ApiMethods.GET, baseUrl, "/system/antivirus/{antivirus_name}", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[AntivirusInfo](200)
      .withErrorResponse[Error](400)
      

  /**
   * get specified antivirus update schedule
   * 
   * Expected answers:
   *   code 200 : UserDefinedSchedule (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameScheduleGet(antivirusName: String): ApiRequest[UserDefinedSchedule] =
    ApiRequest[UserDefinedSchedule](ApiMethods.GET, baseUrl, "/system/antivirus/{antivirus_name}/schedule", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[UserDefinedSchedule](200)
      .withErrorResponse[Error](400)
      

  /**
   * set specified antivirus update schedule
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameSchedulePost(antivirusName: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/antivirus/{antivirus_name}/schedule", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Start specified antivirus service.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameStartPost(antivirusName: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/antivirus/{antivirus_name}/start", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Stop specified antivirus service.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameStopPost(antivirusName: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/antivirus/{antivirus_name}/stop", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return if specified antivirus update process is running.
   * 
   * Expected answers:
   *   code 200 : IsRunning (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameUpdateGet(antivirusName: String): ApiRequest[IsRunning] =
    ApiRequest[IsRunning](ApiMethods.GET, baseUrl, "/system/antivirus/{antivirus_name}/update", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[IsRunning](200)
      .withErrorResponse[Error](400)
      

  /**
   * Trigger specified antivirus update.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param antivirusName name of antivirus engine
   */
  def systemAntivirusAntivirusNameUpdatePost(antivirusName: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/antivirus/{antivirus_name}/update", "application/json")
      .withPathParam("antivirus_name", antivirusName)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * get installed antivirus engine list
   * 
   * Expected answers:
   *   code 200 : Seq[String] (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemAntivirusListGet(): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, baseUrl, "/system/antivirus/list", "application/json")
      .withSuccessResponse[Seq[String]](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return authentication sources for system.
   * 
   * Expected answers:
   *   code 200 : Seq[DomainAuthSource] (Success)
   */
  def systemAuthSourcesGet(): ApiRequest[Seq[DomainAuthSource]] =
    ApiRequest[Seq[DomainAuthSource]](ApiMethods.GET, baseUrl, "/system/auth-sources", "application/json")
      .withSuccessResponse[Seq[DomainAuthSource]](200)
      

  /**
   * Update authentication sources for system.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 1006, 1017)
   * 
   * @param domainAuthSource authentication source array
   */
  def systemAuthSourcesPost(domainAuthSource: Seq[DomainAuthSource]): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/auth-sources", "application/json")
      .withBody(domainAuthSource)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get dns
   * 
   * Expected answers:
   *   code 200 : Dns (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemDnsGet(): ApiRequest[Dns] =
    ApiRequest[Dns](ApiMethods.GET, baseUrl, "/system/dns", "application/json")
      .withSuccessResponse[Dns](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get system information
   * 
   * Expected answers:
   *   code 200 : SystemInfo (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemGet(): ApiRequest[SystemInfo] =
    ApiRequest[SystemInfo](ApiMethods.GET, baseUrl, "/system", "application/json")
      .withSuccessResponse[SystemInfo](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get hostname
   * 
   * Expected answers:
   *   code 200 : Hostname (Success)
   *   code 400 : Error (error: 8, 9, 19001)
   */
  def systemHostnameGet(): ApiRequest[Hostname] =
    ApiRequest[Hostname](ApiMethods.GET, baseUrl, "/system/hostname", "application/json")
      .withSuccessResponse[Hostname](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get hosts
   * 
   * Expected answers:
   *   code 200 : Hosts (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemHostsGet(): ApiRequest[Hosts] =
    ApiRequest[Hosts](ApiMethods.GET, baseUrl, "/system/hosts", "application/json")
      .withSuccessResponse[Hosts](200)
      .withErrorResponse[Error](400)
      

  /**
   * List index error events
   * 
   * Expected answers:
   *   code 200 : Seq[IndexErrors] (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemIndexErrorsGet(): ApiRequest[Seq[IndexErrors]] =
    ApiRequest[Seq[IndexErrors]](ApiMethods.GET, baseUrl, "/system/index-errors", "application/json")
      .withSuccessResponse[Seq[IndexErrors]](200)
      .withErrorResponse[Error](400)
      

  /**
   * Delete index error event
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param body Index error type
   * @param messageId Id of a message
   */
  def systemIndexErrorsMessageIdDeletePost(body: Any, messageId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/index-errors/{message_id}/delete", "application/json")
      .withBody(body)
      .withPathParam("message_id", messageId)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Rerun index by index error event
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param body Index error type
   * @param messageId Id of a message
   */
  def systemIndexErrorsMessageIdReindexPost(body: Any, messageId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/index-errors/{message_id}/reindex", "application/json")
      .withBody(body)
      .withPathParam("message_id", messageId)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get current mail parser config
   * 
   * Expected answers:
   *   code 200 : MailParserConfig (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemMailParserGet(): ApiRequest[MailParserConfig] =
    ApiRequest[MailParserConfig](ApiMethods.GET, baseUrl, "/system/mail-parser", "application/json")
      .withSuccessResponse[MailParserConfig](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update mail parser config
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 23003)
   * 
   * @param mailParserConfig 
   */
  def systemMailParserPost(mailParserConfig: MailParserConfig): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/mail-parser", "application/json")
      .withBody(mailParserConfig)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * List mail queues
   * 
   * Expected answers:
   *   code 200 : Seq[String] (Success)
   */
  def systemMailQueueGet(): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, baseUrl, "/system/mail-queue/", "application/json")
      .withSuccessResponse[Seq[String]](200)
      

  /**
   * Get queue size of specified queue
   * 
   * Expected answers:
   *   code 200 : QueueSize (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param queueName Queue name
   */
  def systemMailQueueQueueNameGet(queueName: String): ApiRequest[QueueSize] =
    ApiRequest[QueueSize](ApiMethods.GET, baseUrl, "/system/mail-queue/{queue_name}", "application/json")
      .withPathParam("queue_name", queueName)
      .withSuccessResponse[QueueSize](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get networking information
   * 
   * Expected answers:
   *   code 200 : NetworkInfo (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemNetworkGet(): ApiRequest[NetworkInfo] =
    ApiRequest[NetworkInfo](ApiMethods.GET, baseUrl, "/system/network", "application/json")
      .withSuccessResponse[NetworkInfo](200)
      .withErrorResponse[Error](400)
      

  /**
   * Rerun index by a message id
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param body Reparse index request
   * @param messageId Id of a message
   */
  def systemReindexMessageIdPost(body: Any, messageId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/system/reindex/{message_id}", "application/json")
      .withBody(body)
      .withPathParam("message_id", messageId)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Listing *all* schedule imap / pop3 import config and status
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (Success)
   */
  def systemScheduleImportGet(): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/system/schedule-import", "application/json")
      .withSuccessResponse[Seq[Any]](200)
      

  /**
   * Test imap / pop3 scheduled import configuration for system. 
   * 
   * Expected answers:
   *   code 200 : ScheduleId (Success)
   *   code 400 : Error (error: 27000)
   * 
   * @param imapPop3Config 
   */
  def systemScheduleImportPost(imapPop3Config: ImapPop3Config): ApiRequest[ScheduleId] =
    ApiRequest[ScheduleId](ApiMethods.POST, baseUrl, "/system/schedule-import", "application/json")
      .withBody(imapPop3Config)
      .withSuccessResponse[ScheduleId](200)
      .withErrorResponse[Error](400)
      

  /**
   * Add imap / pop3 scheduled import configuration for system. 
   * 
   * Expected answers:
   *   code 200 : ScheduleId (Success)
   *   code 400 : Error (error: 4, 5, 8, 9, 27003, 27004, 27005)
   * 
   * @param scheduleImportConfig 
   */
  def systemScheduleImportPut(scheduleImportConfig: ScheduleImportConfig): ApiRequest[ScheduleId] =
    ApiRequest[ScheduleId](ApiMethods.PUT, baseUrl, "/system/schedule-import", "application/json")
      .withBody(scheduleImportConfig)
      .withSuccessResponse[ScheduleId](200)
      .withErrorResponse[Error](400)
      

  /**
   * Delete system imap / pop3 scheduled import configuration. 
   * 
   * Expected answers:
   *   code 200 :  (Success)
   *   code 400 : Error (error: 8, 9, 27006)
   * 
   * @param scheduleId id of schedule job
   */
  def systemScheduleImportScheduleIdDelete(scheduleId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/system/schedule-import/{schedule_id}", "application/json")
      .withPathParam("schedule_id", scheduleId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Error](400)
      

  /**
   * Trigger system imap / pop3 scheduled import immediately. 
   * 
   * Expected answers:
   *   code 200 :  (Success)
   *   code 400 : Error (error: 8, 27001, 27002)
   * 
   * @param scheduleId id of schedule job
   */
  def systemScheduleImportScheduleIdImportPost(scheduleId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/system/schedule-import/{schedule_id}/import", "application/json")
      .withPathParam("schedule_id", scheduleId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update imap / pop3 scheduled import configuration for system. 
   * 
   * Expected answers:
   *   code 200 :  (Success)
   *   code 400 : Error (error: 4, 5, 8 ,9, 27003, 27004, 27005)
   * 
   * @param scheduleImportConfig 
   * @param scheduleId id of schedule job
   */
  def systemScheduleImportScheduleIdPost(scheduleImportConfig: ScheduleImportConfig, scheduleId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/system/schedule-import/{schedule_id}", "application/json")
      .withBody(scheduleImportConfig)
      .withPathParam("schedule_id", scheduleId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get time
   * 
   * Expected answers:
   *   code 200 : Time (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def systemTimeGet(): ApiRequest[Time] =
    ApiRequest[Time](ApiMethods.GET, baseUrl, "/system/time", "application/json")
      .withSuccessResponse[Time](200)
      .withErrorResponse[Error](400)
      



}

