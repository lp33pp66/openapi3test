/store/archive/resource:
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/schemas/ArchiveResourceWithId'
    summary: List editable archive resources
    description: Return archive resources editable by current user.
    tags:
      - Store
  put:
    responses:
      '200':
        description: |
          Add archive resource
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/FlakeId'
      '400':
        description: 'error: 8, 9, 18000, 18003, 18010, 18011, 18013, 18018, 18020'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Add archive resource
    tags:
      - Store
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/ArchiveResource'
      description: resource to be added
      required: true
/store/archive/resource/test:
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18000, 18010, 18013'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Test archive resource
    tags:
      - Store
    requestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - protocol
              - host_address
              - host_port
              - account
              - password
              - remote_path
              - local_path
            properties:
              protocol:
                $ref: '#/schemas/ArchiveResourceProtocol'
              host_address:
                type: string
              host_port:
                type: integer
              account:
                type: string
              password:
                type: string
              remote_path:
                type: string
              local_path:
                type: string
            example:
              protocol: nfs
              server: 1.1.1.1
              port: 111
              account: user
              password: pass
              remote_path: /resource
              local_path: /data/archive
      description: archive resource binding test parameters
      required: true
'/store/archive/resource/{resource_id}':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8 , 9, 18000, 18002, 18003, 18006, 18016, 18018'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Update archive resource of specified id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/ArchiveResource'
      description: archive resource to be updated
      required: true
  delete:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18002, 18006, 18013, 18016'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Delete archive resource
    description: ''
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
'/store/archive/resource/{resource_id}/mount':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18000, 18001, 18002, 18015'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Mount archive resource of specified id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
'/store/archive/resource/{resource_id}/unmount':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18000, 18001, 18002, 18013, 18008, 18010, 18011, 18013'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Unmount archive resource of specified id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
'/store/archive/resource/{resource_id}/storage':
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/schemas/ArchiveStorage'
    summary: List archive storages in specified resource
    description: Return archive storages in specified resource
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
'/store/archive/resource/{resource_id}/storage/mount':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18000, 18002, 18008, 18012, 18021'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Mount archive storage
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
    requestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
              password:
                type: string
      description: archive storage id and password
      required: true
'/store/archive/resource/{resource_id}/storage/unmount':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18008, 18014'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Unmount archive storage
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
    requestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
      description: archive storage id
      required: true
'/store/archive/resource/{resource_id}/storage/{storage_id}':
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              $ref: '#/schemas/ArchivePolicyWithTimeRange'
      '400':
        description: 'error: 8, 9, 18014'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Get archive information for storage in specified resource
    description: Return archive information for storage in specified resource
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archiveResourceIdPath'
      - $ref: '#/parameters/archiveStorageIdPath'
'/store/archive/policy':
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/schemas/ArchivePolicyWithId'
    summary: List system archive policies
    description: Return system archive policies
    tags:
      - Store
  put:
    responses:
      '200':
        description: |
          Add system archive policy
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/FlakeId'
      '400':
        description: 'error: 8 ,9, 18003, 18008, 18017, 18022'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Add system archive policy
    tags:
      - Store
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/ArchivePolicy'
      description: policy to be added
      required: true
'/store/archive/policy/{policy_id}':
  delete:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18004, 18007'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Delete system archive policy
    description: ''
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archivePolicyIdPath'
'/store/archive/policy/{policy_id}/execute':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18003, 18004, 18008, 18007, 18009, 18019'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Execute system archive policy instantly
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archivePolicyIdPath'
'/store/archive/policy/{policy_id}/abort':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Abort system archive policy execution
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/archivePolicyIdPath'
'/store/archive/{domain_id}/policy':
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/schemas/ArchivePolicyWithId'
    summary: List archive policies of specified domain
    description: Return archive policies of specified domain
    tags:
      - Store
    parameters:
      - $ref: 'parameters.yaml#/domainIdPath'
  put:
    responses:
      '200':
        description: |
          Add archive policy
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/FlakeId'
      '400':
        description: 'error: 8 ,9, 18003, 18008, 18017'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Add archive policy
    tags:
      - Store
    parameters:
      - $ref: 'parameters.yaml#/domainIdPath'
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/ArchivePolicy'
      description: policy to be added
      required: true
'/store/archive/{domain_id}/policy/{policy_id}':
  delete:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18004, 18007'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Delete archive policy
    description: ''
    tags:
      - Store
    parameters:
      - $ref: 'parameters.yaml#/domainIdPath'
      - $ref: '#/parameters/archivePolicyIdPath'
'/store/archive/{domain_id}/policy/{policy_id}/execute':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 18003, 18004, 18008, 18007, 18009'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Execute archive policy instantly
    tags:
      - Store
    parameters:
      - $ref: 'parameters.yaml#/domainIdPath'
      - $ref: '#/parameters/archivePolicyIdPath'
'/store/archive/{domain_id}/policy/{policy_id}/abort':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: Abort archive policy execution
    tags:
      - Store
    parameters:
      - $ref: 'parameters.yaml#/domainIdPath'
      - $ref: '#/parameters/archivePolicyIdPath'
/store/export/list:
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: integer
              example:
                - '711483066'
    description: List exporters
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/nodeId'
/store/export/pst:
  post:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              $ref: '#/schemas/ExportId'
      '400':
        description: 'error: 8, 9, 28000'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: >
      Request to export mails into pst file

      Note: nodeId in request is optional, will use current connected node if
      not specified.
    tags:
      - Store
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: string
                  format: flake id
      description: target message-ids to export
      required: true
'/store/export/{id}':
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              $ref: '#/schemas/AsyncExportJobInfo'
      '400':
        description: 'error: 8, 9, 28002, 28003'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Query exporter status
    description: |
      Return exporter status with specified exporter id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/exporterIdPath'
      - $ref: '#/parameters/nodeId'
  delete:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 28002, 28003'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Request remove exporter record and temporary files
    description: >
      Request to remove exporter record and temporary files of current connected node or node of
      nodeId
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/exporterIdPath'
      - in: query
        name: nodeId
        required: false
        schema:
          type: string
'/store/export/{id}/download':
  get:
    responses:
      '200':
        description: packed messages
        content:
          text/plain:
            schema:
              type: string
              format: binary
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: |
      Download packed messages
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/exporterIdPath'
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/NodeId'
      description: operation target node
'/store/export/{id}/abort':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9, 28002, 28003'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: |
      Request to abort current exporting process of specified exporter id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/exporterIdPath'
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/NodeId'
      description: operation target node
/store/import/list:
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: integer
              example:
                - '711483066'
    description: List importers
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/nodeId'
/store/import/pst:
  post:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              $ref: '#/schemas/ImportId'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: >
      Request to import mails from target pst file

      Note: nodeId in request is optional, will use current connected node if
      not specified.
    tags:
      - Store
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/ImportPst'
      required: true
/store/import/eml:
  post:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              $ref: '#/schemas/ImportId'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: >
      Request to import mails from target eml file, support zip/gzip
      compressed input.

      Note: nodeId in request is optional, will use current connected node if
      not specified.
    tags:
      - Store
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/ImportEml'
      required: true
'/store/import/{id}':
  get:
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/AsyncImportJobInfo'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Query importer status
    description: |
      Return importer status with specified importer id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/importerIdPath'
      - $ref: '#/parameters/nodeId'
  delete:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    summary: Request remove importer record
    description: >
      Request to remove importer record of current connected node or node of
      nodeId
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/importerIdPath'
      - in: query
        name: nodeId
        required: false
        schema:
          type: string
'/store/import/{id}/abort':
  post:
    responses:
      '200':
        $ref: 'responses.yaml#/Success'
      '400':
        description: 'error: 8, 9'
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/Error'
    description: |
      Request to abort current importing process of specified importer id
    tags:
      - Store
    parameters:
      - $ref: '#/parameters/importerIdPath'
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/schemas/NodeId'
      description: operation target node
schemas:
  ArchivePolicy:
    type: object
    properties:
      name:
        type: string
      resource_id:
        type: string
        format: flake id
      day_before:
        type: integer
      schedule:
        $ref: 'schemas.yaml#/UserDefinedSchedule'
      mail_type:
        $ref: '#/schemas/ArchiveMailTypeConfig'
      encryption:
        $ref: '#/schemas/ArchiveEncryptionConfig'
      notification:
        $ref: '#/schemas/ArchiveNotificationConfig'
      split_length:
        type: integer
    required:
      - resource_id
      - day_before
      - mail_type
      - encryption
      - notification
  ArchiveMailTypeConfig:
    type: object
    properties:
      sent:
        type: boolean
      quarantine:
        type: boolean
      bounced:
        type: boolean
      discarded:
        type: boolean
      imported:
        type: boolean
      other:
        type: boolean
    required:
      - sent
      - quarantined
      - bounced
      - discarded
      - imported
      - other
  ArchiveEncryptionConfig:
    type: object
    properties:
      enabled:
        type: boolean
      password:
        type: string
    required:
      - enabled
  ArchiveNotificationConfig:
    type: object
    properties:
      enabled:
        type: boolean
      recipient:
        type: string
        format: email
      minimum_free_space_gb:
        type: integer
    required:
      - enabled
  ArchivePolicyWithId:
    type: object
    properties:
      id:
        type: string
        format: flake id
      policy:
        $ref: '#/schemas/ArchivePolicy'
      in_progress:
        type: boolean
    required:
      - id
      - policy
      - in_progress
  ArchivePolicyWithTimeRange:
    allOf:
      - $ref: '#/schemas/ArchivePolicy'
      - type: object
        properties:
          begin_time:
            type: string
            format: integer
          end_time:
            type: string
            format: integer
  ArchiveResource:
    type: object
    properties:
      domain:
        type: string
        format: flakeId
      name:
        type: string
      protocol:
        $ref: '#/schemas/ArchiveResourceProtocol'
      host_address:
        type: string
        format: ip
      host_port:
        type: integer
      account:
        type: string
      password:
        type: string
      remote_path:
        type: string
      local_path:
        type: string
      mount:
        type: boolean
    required:
      - domain
      - name
      - protocol
      - local_path
  ArchiveResourceProtocol:
    type: string
    enum:
      - local
      - nfs
      - smb
  ArchiveResourceWithId:
    type: object
    properties:
      id:
        type: string
        format: flake id
      resource:
        $ref: '#/schemas/ArchiveResource'
      status:
        $ref: '#/schemas/ArchiveResourceStatus'
      storage_all_mounted:
        type: boolean
    required:
      - id
      - resource
      - status
      - storage_all_mounted
  ArchiveResourceStatus:
    type: object
    properties:
      free_space_gb:
        type: integer
      status:
        type: string
    required:
      - free_space_gb
      - status
  ArchiveStorage:
    type: object
    properties:
      id:
        type: string
        format: flakeId
      mounted:
        type: boolean
    required:
      - id
      - mounted
  AsyncExportJobInfo:
    type: object
    properties:
      owner:
        type: string
        format: flake id
      state:
        type: string
        enum:
          - NONE
          - FAILED
          - IN_PROGRESS
          - SUCCESS
          - ABORTED
      target:
        type: string
      message:
        type: string
      current:
        type: number
        format: integer
      total:
        type: number
        format: integer
      id:
        type: string
        format: flake id
      start_time:
        type: string
        format: integer
      end_time:
        type: string
        format: integer
    example:
      owner: '537823519937921025'
      state: SUCCESS
      target: /srv/smail/main/tmp/exportPst_9123281879739937198.pst
      message: '10 / 10'
      current: 10
      total: 10
      id: '545122071676452864'
      start_time: '1550048068911'
      end_time: '1550048075788'
  ExportId:
    type: object
    properties:
      id:
        type: string
    example:
      id: '711483066'
  ImportEml:
    type: object
    allOf:
      - $ref: '#/schemas/NodeId'
      - $ref: '#/schemas/EmlConfig'
      - type: object
        properties:
          data_path:
            type: string
  EmlConfig:
    type: object
    properties:
      config:
        required:
          - domain_configs
        type: object
        properties:
          default_address:
            type: string
          default_domain:
            type: string
          default_sender:
            type: string
          default_recipient:
            type: string
          domain_configs:
            oneOf:
              - $ref: 'schemas.yaml#/ImportToDomainConfig'
              - $ref: 'schemas.yaml#/ImportToSystemConfig'
          tag:
            type: string
  ImportId:
    type: object
    properties:
      id:
        type: string
    example:
      id: '711483066'
  ImportPst:
    type: object
    allOf:
      - $ref: '#/schemas/NodeId'
      - $ref: '#/schemas/PstConfig'
      - type: object
        properties:
          data_path:
            type: string
  PstConfig:
    type: object
    properties:
      config:
        required:
          - domain_configs
        type: object
        properties:
          default_address:
            type: string
          default_domain:
            type: string
          domain_configs:
            oneOf:
              - $ref: 'schemas.yaml#/ImportToDomainConfig'
              - $ref: 'schemas.yaml#/ImportToSystemConfig'
          tag:
            type: string
  NodeId:
    type: object
    properties:
      node_id:
        type: string
parameters:
  archivePolicyIdPath:
    name: policy_id
    in: path
    description: id of archive policy
    required: true
    schema:
      type: string
      format: flakeId
  archiveResourceIdPath:
    name: resource_id
    in: path
    description: id of archive resource
    required: true
    schema:
      type: string
      format: flakeId
  archiveStorageIdPath:
    name: storage_id
    in: path
    description: id of archive storage
    required: true
    schema:
      type: string
      format: flakeId
  exporterIdPath:
    name: id
    in: path
    description: Id of an expoter
    required: true
    schema:
      type: integer
  importerIdPath:
    name: id
    in: path
    description: Id of an impoter
    required: true
    schema:
      type: integer
  nodeId:
    name: node-id
    in: query
    description: Id of a node
    required: false
    schema:
      type: string