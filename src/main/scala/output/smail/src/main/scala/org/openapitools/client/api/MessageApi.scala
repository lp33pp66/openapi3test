/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Error
import java.io.File
import org.openapitools.client.model.Message
import org.openapitools.client.model.MessageEnvelope
import org.openapitools.client.model.Success
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object MessageApi {

  def apply(baseUrl: String = "http://localhost") = new MessageApi(baseUrl)
}

class MessageApi(baseUrl: String) {
  
  /**
   * Download message with specified message ID.
   * 
   * Expected answers:
   *   code 200 : File (download message)
   *   code 400 : Error (error: 8, 9, 7000, 7001)
   * 
   * @param messageId Id of a message
   */
  def messageMessageIdDownloadGet(messageId: String): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/message/{message_id}/download'", "application/json")
      .withPathParam("message_id", messageId)
      .withSuccessResponse[File](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return message digest with specified message ID.
   * 
   * Expected answers:
   *   code 200 : MessageEnvelope (Success)
   *   code 400 : Error (error: 8, 9, 7000, 7001)
   * 
   * @param messageId Id of a message
   */
  def messageMessageIdEnvelopeGet(messageId: String): ApiRequest[MessageEnvelope] =
    ApiRequest[MessageEnvelope](ApiMethods.GET, baseUrl, "/message/{message_id}/envelope'", "application/json")
      .withPathParam("message_id", messageId)
      .withSuccessResponse[MessageEnvelope](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return entire message contents with specified message ID.
   * 
   * Expected answers:
   *   code 200 : Message (Success)
   *   code 400 : Error (error: 8, 9, 7000, 7001)
   * 
   * @param messageId Id of a message
   */
  def messageMessageIdGet(messageId: String): ApiRequest[Message] =
    ApiRequest[Message](ApiMethods.GET, baseUrl, "/message/{message_id}'", "application/json")
      .withPathParam("message_id", messageId)
      .withSuccessResponse[Message](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return part at specified `partNum` of specified message ID. If query parameter `raw` set to `false`, the body of MIME part at `partNum` will be content transfer decoded and only body of the `partNum` part will be returned. If query parameter `raw` set to `true`, the body of MIME part at `partNum` and **nested MIME part** will be returned as it is.
   * 
   * Expected answers:
   *   code 200 : File (return part at specified `partNum`)
   *   code 400 : Error (error: 8, 9, 7000, 7001)
   * 
   * @param messageId Id of a message
   * @param partNum `partNum` of a attachment in message
   * @param raw Whether returns MIME part at partNum as raw
   */
  def messageMessageIdPartPartNumGet(messageId: String, partNum: String, raw: Option[Boolean] = None): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/message/{message_id}/part/{partNum}'", "application/json")
      .withQueryParam("raw", raw)
      .withPathParam("message_id", messageId)
      .withPathParam("partNum", partNum)
      .withSuccessResponse[File](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return raw message with specified message ID.
   * 
   * Expected answers:
   *   code 200 : File (raw message)
   *   code 400 : Error (error: 8, 9, 7000, 7001)
   * 
   * @param messageId Id of a message
   */
  def messageMessageIdRawGet(messageId: String): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/message/{message_id}/raw'", "application/json")
      .withPathParam("message_id", messageId)
      .withSuccessResponse[File](200)
      .withErrorResponse[Error](400)
      

  /**
   * Report specified mail as misjudged spam mail 
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   * 
   * @param messageId Id of a message
   */
  def messageMessageIdReportAsNonSpamPost(messageId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/message/{message_id}/report-as-non-spam'", "application/json")
      .withPathParam("message_id", messageId)
      .withSuccessResponse[Success](200)
      

  /**
   * Report specified mail as spam 
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   * 
   * @param messageId Id of a message
   */
  def messageMessageIdReportAsSpamPost(messageId: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/message/{message_id}/report-as-spam'", "application/json")
      .withPathParam("message_id", messageId)
      .withSuccessResponse[Success](200)
      



}

