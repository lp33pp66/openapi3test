/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Downloaded
import org.openapitools.client.model.Error
import org.openapitools.client.model.Success
import org.openapitools.client.model.Version
import org.openapitools.client.model.VersionDetail
import org.openapitools.client.model.VersionEntry
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object UpdateApi {

  def apply(baseUrl: String = "http://localhost") = new UpdateApi(baseUrl)
}

class UpdateApi(baseUrl: String) {
  
  /**
   * Get current asrc pattern version
   * 
   * Expected answers:
   *   code 200 : Version (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def updateAsrcPatternVersionGet(): ApiRequest[Version] =
    ApiRequest[Version](ApiMethods.GET, baseUrl, "/update/asrc-pattern-version", "application/json")
      .withSuccessResponse[Version](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get current MailPlatform version
   * 
   * Expected answers:
   *   code 200 : Version (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def updateCurrentVersionGet(): ApiRequest[Version] =
    ApiRequest[Version](ApiMethods.GET, baseUrl, "/update/current-version", "application/json")
      .withSuccessResponse[Version](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get version list
   * 
   * Expected answers:
   *   code 200 : Seq[VersionEntry] (Success)
   *   code 400 : Error (error: 20002, 20005)
   * 
   * @param refresh force to refresh version list.
   */
  def updateListGet(refresh: Option[Boolean] = None): ApiRequest[Seq[VersionEntry]] =
    ApiRequest[Seq[VersionEntry]](ApiMethods.GET, baseUrl, "/update/list", "application/json")
      .withQueryParam("refresh", refresh)
      .withSuccessResponse[Seq[VersionEntry]](200)
      .withErrorResponse[Error](400)
      

  /**
   * Download specified patch.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 2, 8, 20001)
   * 
   * @param version version string
   */
  def updateVersionDownloadPost(version: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/update/{version}/download", "application/json")
      .withPathParam("version", version)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get version detail information
   * 
   * Expected answers:
   *   code 200 : VersionDetail (Success)
   *   code 400 : Error (error: 2, 8, 20001, 20002, 20005)
   * 
   * @param version version string
   * @param refresh force to refresh version list.
   */
  def updateVersionGet(version: String, refresh: Option[Boolean] = None): ApiRequest[VersionDetail] =
    ApiRequest[VersionDetail](ApiMethods.GET, baseUrl, "/update/{version}/", "application/json")
      .withQueryParam("refresh", refresh)
      .withPathParam("version", version)
      .withSuccessResponse[VersionDetail](200)
      .withErrorResponse[Error](400)
      

  /**
   * Install specified patch.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 2, 8, 20001, 20004, 20006)
   * 
   * @param version version string
   */
  def updateVersionInstallPost(version: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/update/{version}/install", "application/json")
      .withPathParam("version", version)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return download status.
   * 
   * Expected answers:
   *   code 200 : Downloaded (Success)
   *   code 400 : Error (error: 2, 8, 20001, 20002, 20003)
   * 
   * @param version version string
   */
  def updateVersionStatusGet(version: String): ApiRequest[Downloaded] =
    ApiRequest[Downloaded](ApiMethods.GET, baseUrl, "/update/{version}/status", "application/json")
      .withPathParam("version", version)
      .withSuccessResponse[Downloaded](200)
      .withErrorResponse[Error](400)
      



}

