/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Error
import org.openapitools.client.model.License
import org.openapitools.client.model.LicenseFeature
import org.openapitools.client.model.LicenseUpdate
import org.openapitools.client.model.Success
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object LicenseApi {

  def apply(baseUrl: String = "http://localhost") = new LicenseApi(baseUrl)
}

class LicenseApi(baseUrl: String) {
  
  /**
   * Return license feature information.
   * 
   * Expected answers:
   *   code 200 : LicenseFeature (Success)
   */
  def licenseFeatureGet(): ApiRequest[LicenseFeature] =
    ApiRequest[LicenseFeature](ApiMethods.GET, baseUrl, "/license/feature", "application/json")
      .withSuccessResponse[LicenseFeature](200)
      

  /**
   * Update license
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param licenseUpdate 
   */
  def licenseFeaturePost(licenseUpdate: LicenseUpdate): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/license/feature", "application/json")
      .withBody(licenseUpdate)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return license information.
   * 
   * Expected answers:
   *   code 200 : License (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def licenseGet(): ApiRequest[License] =
    ApiRequest[License](ApiMethods.GET, baseUrl, "/license", "application/json")
      .withSuccessResponse[License](200)
      .withErrorResponse[Error](400)
      



}

