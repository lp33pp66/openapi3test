/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Error
import org.openapitools.client.model.PreferenceResolution
import org.openapitools.client.model.ScopedPreference
import org.openapitools.client.model.ScopedPreferenceWithKey
import org.openapitools.client.model.Success
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object PreferenceApi {

  def apply(baseUrl: String = "http://localhost") = new PreferenceApi(baseUrl)
}

class PreferenceApi(baseUrl: String) {
  
  /**
   * List user preferences
   * 
   * Expected answers:
   *   code 200 : Seq[ScopedPreferenceWithKey] (Success)
   * 
   * @param accountId Id of a account
   * @param email email
   */
  def preferenceAccountAccountIdEmailGet(accountId: String, email: String): ApiRequest[Seq[ScopedPreferenceWithKey]] =
    ApiRequest[Seq[ScopedPreferenceWithKey]](ApiMethods.GET, baseUrl, "/preference/account/{account_id}/{email}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("email", email)
      .withSuccessResponse[Seq[ScopedPreferenceWithKey]](200)
      

  /**
   * Delete preferences setting
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 10, 5000)
   * 
   * @param accountId Id of a account
   * @param email email
   * @param key key of a setting
   */
  def preferenceAccountAccountIdEmailKeyDelete(accountId: String, email: String, key: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.DELETE, baseUrl, "/preference/account/{account_id}/{email}/{key}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("email", email)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return user preferences, using email to map and return domain predefined preferences
   * 
   * Expected answers:
   *   code 200 : ScopedPreference (Success)
   *   code 400 : Error (error: 8, 9, 10, 5002)
   * 
   * @param accountId Id of a account
   * @param email email
   * @param key key of a setting
   */
  def preferenceAccountAccountIdEmailKeyGet(accountId: String, email: String, key: String): ApiRequest[ScopedPreference] =
    ApiRequest[ScopedPreference](ApiMethods.GET, baseUrl, "/preference/account/{account_id}/{email}/{key}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("email", email)
      .withPathParam("key", key)
      .withSuccessResponse[ScopedPreference](200)
      .withErrorResponse[Error](400)
      

  /**
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 10, 5000)
   * 
   * @param body a json object
   * @param accountId Id of a account
   * @param email email
   * @param key key of a setting
   */
  def preferenceAccountAccountIdEmailKeyPost(body: Any, accountId: String, email: String, key: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/preference/account/{account_id}/{email}/{key}", "application/json")
      .withBody(body)
      .withPathParam("account_id", accountId)
      .withPathParam("email", email)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * List preferences
   * 
   * Expected answers:
   *   code 200 : ScopedPreferenceWithKey (Success)
   * 
   * @param domainId Id of domain
   */
  def preferenceDomainDomainIdGet(domainId: String): ApiRequest[ScopedPreferenceWithKey] =
    ApiRequest[ScopedPreferenceWithKey](ApiMethods.GET, baseUrl, "/preference/domain/{domain_id}", "application/json")
      .withPathParam("domain_id", domainId)
      .withSuccessResponse[ScopedPreferenceWithKey](200)
      

  /**
   * Delete preferences setting
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 10, 5000)
   * 
   * @param domainId Id of domain
   * @param key key of a setting
   */
  def preferenceDomainDomainIdKeyDelete(domainId: String, key: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.DELETE, baseUrl, "/preference/domain/{domain_id}/{key}", "application/json")
      .withPathParam("domain_id", domainId)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get domain preferences
   * 
   * Expected answers:
   *   code 200 : ScopedPreference (Success)
   *   code 400 : Error (error: 8, 9, 10, 5002)
   * 
   * @param domainId Id of domain
   * @param key key of a setting
   */
  def preferenceDomainDomainIdKeyGet(domainId: String, key: String): ApiRequest[ScopedPreference] =
    ApiRequest[ScopedPreference](ApiMethods.GET, baseUrl, "/preference/domain/{domain_id}/{key}", "application/json")
      .withPathParam("domain_id", domainId)
      .withPathParam("key", key)
      .withSuccessResponse[ScopedPreference](200)
      .withErrorResponse[Error](400)
      

  /**
   * Set domain preferences
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 10, 5000)
   * 
   * @param body a json object
   * @param domainId Id of domain
   * @param key key of a setting
   */
  def preferenceDomainDomainIdKeyPost(body: Any, domainId: String, key: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/preference/domain/{domain_id}/{key}", "application/json")
      .withBody(body)
      .withPathParam("domain_id", domainId)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update domain preference resolution
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 10, 5001)
   * 
   * @param domainId Id of domain
   * @param key key of a setting
   * @param preferenceResolution 
   */
  def preferenceDomainDomainIdKeyResolutionPost(domainId: String, key: String, preferenceResolution: Option[PreferenceResolution] = None): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/preference/domain/{domain_id}/{key}/resolution", "application/json")
      .withBody(preferenceResolution)
      .withPathParam("domain_id", domainId)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * List preferences
   * 
   * Expected answers:
   *   code 200 : ScopedPreferenceWithKey (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def preferenceSystemGet(): ApiRequest[ScopedPreferenceWithKey] =
    ApiRequest[ScopedPreferenceWithKey](ApiMethods.GET, baseUrl, "/preference/system", "application/json")
      .withSuccessResponse[ScopedPreferenceWithKey](200)
      .withErrorResponse[Error](400)
      

  /**
   * Delete preferences setting
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 5000)
   * 
   * @param key key of a setting
   */
  def preferenceSystemKeyDelete(key: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.DELETE, baseUrl, "/preference/system/{key}", "application/json")
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Get system preferences
   * 
   * Expected answers:
   *   code 200 : ScopedPreference (Success)
   *   code 400 : Error (error: 8, 9, 5002)
   * 
   * @param key key of a setting
   */
  def preferenceSystemKeyGet(key: String): ApiRequest[ScopedPreference] =
    ApiRequest[ScopedPreference](ApiMethods.GET, baseUrl, "/preference/system/{key}", "application/json")
      .withPathParam("key", key)
      .withSuccessResponse[ScopedPreference](200)
      .withErrorResponse[Error](400)
      

  /**
   * Set system preferences
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9, 5000)
   * 
   * @param body a json object
   * @param key key of a setting
   */
  def preferenceSystemKeyPost(body: Any, key: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/preference/system/{key}", "application/json")
      .withBody(body)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update system preference resolution
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 5001)
   * 
   * @param key key of a setting
   * @param preferenceResolution 
   */
  def preferenceSystemKeyResolutionPost(key: String, preferenceResolution: Option[PreferenceResolution] = None): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/preference/system/{key}/resolution", "application/json")
      .withBody(preferenceResolution)
      .withPathParam("key", key)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      



}

