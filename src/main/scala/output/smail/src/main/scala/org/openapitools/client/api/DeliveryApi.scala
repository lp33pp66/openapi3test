/**
 * Mail Platform API
 * Mail Platform API # Beyond OpenAPI [Reference](reference.html) for API which cannot modeled after OpenAPI. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DeliveryConfig
import org.openapitools.client.model.DeliverySetting
import org.openapitools.client.model.DeliveryStatus
import org.openapitools.client.model.Error
import org.openapitools.client.model.ForwardConfig
import org.openapitools.client.model.InlineObject19
import org.openapitools.client.model.Success
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object DeliveryApi {

  def apply(baseUrl: String = "http://localhost") = new DeliveryApi(baseUrl)
}

class DeliveryApi(baseUrl: String) {
  
  /**
   * Forward stored mails of given id and return sending results
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param forwardConfig 
   */
  def deliveryForwardPost(forwardConfig: ForwardConfig): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.POST, baseUrl, "/delivery/forward", "application/json")
      .withBody(forwardConfig)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Error](400)
      

  /**
   * Delete gateway setting manageable by current user
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param domainName name of domain
   */
  def deliveryGatewayDomainNameDelete(domainName: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.DELETE, baseUrl, "/delivery/gateway/{domain_name}", "application/json")
      .withPathParam("domain_name", domainName)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update gateway setting manageable by current user
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param inlineObject19 
   * @param domainName name of domain
   */
  def deliveryGatewayDomainNamePost(inlineObject19: InlineObject19, domainName: String): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/delivery/gateway/{domain_name}", "application/json")
      .withBody(inlineObject19)
      .withPathParam("domain_name", domainName)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return gateway settings manageable by current user
   * 
   * Expected answers:
   *   code 200 : Map[String, DeliverySetting] (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def deliveryGatewayGet(): ApiRequest[Map[String, DeliverySetting]] =
    ApiRequest[Map[String, DeliverySetting]](ApiMethods.GET, baseUrl, "/delivery/gateway", "application/json")
      .withSuccessResponse[Map[String, DeliverySetting]](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return delivery configuration. Bounce attachment: none / heads / message 
   * 
   * Expected answers:
   *   code 200 : DeliveryConfig (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def deliveryGet(): ApiRequest[DeliveryConfig] =
    ApiRequest[DeliveryConfig](ApiMethods.GET, baseUrl, "/delivery", "application/json")
      .withSuccessResponse[DeliveryConfig](200)
      .withErrorResponse[Error](400)
      

  /**
   * Update delivery configuration with specified parameters.
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   * 
   * @param deliveryConfig 
   */
  def deliveryPost(deliveryConfig: DeliveryConfig): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/delivery", "application/json")
      .withBody(deliveryConfig)
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Start delivery service
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def deliveryStartPost(): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/delivery/start", "application/json")
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      

  /**
   * Return current deliver status
   * 
   * Expected answers:
   *   code 200 : DeliveryStatus (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def deliveryStatusGet(): ApiRequest[DeliveryStatus] =
    ApiRequest[DeliveryStatus](ApiMethods.GET, baseUrl, "/delivery/status", "application/json")
      .withSuccessResponse[DeliveryStatus](200)
      .withErrorResponse[Error](400)
      

  /**
   * Stop delivery service
   * 
   * Expected answers:
   *   code 200 : Success (Success)
   *   code 400 : Error (error: 8, 9)
   */
  def deliveryStopPost(): ApiRequest[Success] =
    ApiRequest[Success](ApiMethods.POST, baseUrl, "/delivery/stop", "application/json")
      .withSuccessResponse[Success](200)
      .withErrorResponse[Error](400)
      



}

